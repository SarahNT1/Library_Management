@page "/returnBook"

@using System.Data
@using Database
@using ORM
@using MauiAppManager.Data
@using MySqlConnector
@inject NavigationManager navigationManager

<h3>Return</h3>

<table class="table table-striped">
    <tbody>
        <tr>
            <th>
                Book Title:
            </th>
            <th>
                Member ID:
            </th>
        </tr>
        <tr>
            <td>
                <input type="text" class="form-control" @bind="returnBookTitle"/>
            </td>
            <td>
                <input type="text" class="form-control" @bind="returnMemberId" />
            </td>
        </tr>
        <tr>
            <td>
                <button type="button" class="btn btn-primary btn-info" @onclick="CancelReturn">Back</button>
                <button type="button" class="btn btn-primary btn-info" @onclick="ReturnBook">Confirm</button>
            </td>
        </tr>
    </tbody>
</table>

@code {
    private string returnBookTitle;
    private string returnMemberId;

    public async void CancelReturn()
    {
        navigationManager.NavigateTo("searchAndModify");
    }

    public async void ReturnBook()
    {
        try
        {
            int bookIdReturn = await DBManager.FindBookId(returnBookTitle);
            bool returned = await DBManager.DeleteReserved(bookIdReturn, returnMemberId);

            if(returned)
            {
                bool loanUpdated = await DBManager.UpdateLoan(bookIdReturn, returnMemberId);
                bool quantityUpdate = await DBManager.UpdateQuantityReturn(bookIdReturn);

                await App.Current.MainPage.DisplayAlert("Success", "This book has been returned.", "OK");
            }
            else
            {
                await App.Current.MainPage.DisplayAlert("Unsuccessfull", "This book was not returned.", "OK");
            }
        }
        catch(MySqlException ex)
        {
            await App.Current.MainPage.DisplayAlert("Error", "Check input fields: " + ex.Message, "OK");
        }
    }
}
